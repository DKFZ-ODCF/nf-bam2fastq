/**
 *  Configuration for the DKFZ-ODCF/Bam2Fastq Nextflow workflow.
 *  Author: Philip R. Kensche
 */

nextflowVersion = '>= 20.04.1.5335'

manifest {
    homePage = 'https://github.com/DKFZ-ODCF/nf-bam2fastq'
    description = 'BAM-to-FASTQ conversion and FASTQ-sorting workflow'
    mainScript = 'bam2fastq.nf'
    version = '0.2.0'
    author = 'Philip Reiner Kensche'
}


profiles {

    test {
        process {
            cpus = 1
            memory = 1.GB
        }
    }

    local {
        process {
            executor = 'local'
        }
    }

    conda {

        process {
            conda = './task-environment.yml'

            beforeScript = """
            export SAMTOOLS_BINARY=samtools
            export PICARD_BINARY=picard
            export JAVA_BINARY=java
            export MBUFFER_BINARY=mbuffer
            export CHECKSUM_BINARY=md5sum
            export PERL_BINARY=perl
            export BIOBAMBAM_BAM2FASTQ_BINARY=bamtofastq
            """
        }

        cacheDir = "./conda_env"
    }

    docker {
        docker.enabled = true
        docker.runOptions='-u $(id -u):$(id -g)'
        process {
          container = 'nf-bam2fastq:latest'
        }
    }

    singularity {
        process.container = 'nf-bam2fastq.sif'
    	singularity.enabled = true
    	singularity.cacheDir = "./"       // Assume the Singularity image is in the execution directory.
	    singularity.autoMounts = true
    }


    dkfzModules {

        process {
            beforeScript = """
            module load bash/4.4.18
            module load samtools/1.5
            module load picard/2.13.2
            module load java/1.8.0_131
            module load mbuffer/20160613
            module load biobambam2/2.0.87
            
            export SAMTOOLS_BINARY=samtools
            export PICARD_BINARY=picard
            export JAVA_BINARY=java
            export MBUFFER_BINARY=mbuffer
            export CHECKSUM_BINARY=md5sum
            export PERL_BINARY=perl
            export BIOBAMBAM_BAM2FASTQ_BINARY=bamtofastq
            """
        }
    }

    lsf {
        process {
            executor = 'lsf'
        }
    }

}
